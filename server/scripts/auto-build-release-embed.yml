name: auto build release
on:
  release:
    types: [created]
  workflow_dispatch:
jobs:
  build-go-binary:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64, arm]
        exclude:
          - goarch: arm
            goos: darwin
          - goarch: arm
            goos: windows
          - goarch: arm64
            goos: windows

#        include:
#          - goarch: amd64
#            goos: linux
#          - goarch: arm
#            goos: linux
#          - goarch: amd64
#            goos: darwin
#          - goarch: arm64
#            goos: darwin
#          - goarch: amd64
#            goos: windows
        node-version: [18.16.0]
    steps:
      - uses: actions/checkout@v3
      - name: Get version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Build web
        run: |
          cd web
          sed -i 's/old-version/${{ steps.get_version.outputs.VERSION }}/g' ./src/layout/footer/index.vue
          npm install
          npm run build
          rm -rf ../server/web/web
          mv web ../server/web/
      - name: Build Go
        run: |
          cd server
          sudo apt update -y
#          go env -w GO111MODULE=on
          go env -w CGO_ENABLED=1
          go env -w GOOS=${{matrix.goos}} 
          go env -w GOARCH=${{matrix.goarch}}
          case ${{matrix.goarch}} in
          arm64)
            if [[ ${{matrix.goos}} == 'darwin' ]] || [[ ${{matrix.goos}} == 'windows' ]]; then
              sudo apt install -y build-essential gcc-multilib
            else 
              sudo apt install gcc-aarch64-linux-gnu -y
              go env -w CC=aarch64-linux-gnu-gcc
            fi
            ;;
          arm)
            if [[ ${{matrix.goos}} == 'darwin' ]] || [[ ${{matrix.goos}} == 'windows' ]]; then
              sudo apt install -y build-essential gcc-multilib
            else 
             sudo apt-get install gcc-arm-linux-gnueabihf -y
             go env -w CC=arm-linux-gnueabihf-gcc
            fi
            ;;
          esac
          go build -o AirGo -ldflags='-s -w --extldflags "-static -fpic"' main.go
      - name: Package
        run: |
          cd server
          zip  AirGo-${{ matrix.goos }}-${{ matrix.goarch }}-${{ steps.get_version.outputs.VERSION }}.zip AirGo config.yaml LICENSE
      - name: Upload to release
        uses: svenstaro/upload-release-action@v2
        if: github.event_name == 'release'
        with:
          repo_token: ${{ secrets.Action_Token }}
          file: server/AirGo-${{ matrix.goos }}-${{ matrix.goarch }}-${{ steps.get_version.outputs.VERSION }}.zip
          tag: ${{ github.ref }}
          file_glob: true